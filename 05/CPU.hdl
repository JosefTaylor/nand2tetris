// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Inputs
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ARegIn); // A instructions write the whole instruction to A register
    And(a=instruction[15], b=instruction[5], out=cCommandWriteA); // it's a C command and we're writing to A Register
    Not(in=instruction[15], out=aCommand);
    Or(a=cCommandWriteA, b=aCommand, out=ARegLoad); // load is either d1=instruction[5] OR instruction[15]
    And(a=instruction[15], b=instruction[4], out=DRegLoad); // load when it's a C command and we're writing to D
    // Registers
    ARegister(in=ARegIn, load=ARegLoad, out=ARegOut, out[0..14]=addressM); //A Register- 
    DRegister(in=ALUOut, load=DRegLoad, out=DRegOut); //D Register
    
    // Address or Memory?
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ARegOrMemoryOut); // sel = a
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ALU
    ALU(x=DRegOut, y=ARegOrMemoryOut, 
    zx=instruction[11], nx=instruction[10],
    zy=instruction[9], ny=instruction[8], 
    f=instruction[7], no=instruction[6],
     out=ALUOut, out=outM, zr=ALUZero, ng=ALUNeg);

    // Derive an extra status pin for ALU > 0
    Not(in=ALUNeg, out=ALUNotNeg);
    Not(in=ALUZero, out=ALUNotZero);
    And(a=ALUNotNeg, b=ALUNotZero, out=ALUPos);
    
    // Jump Logic
    And(a=ALUPos, b=instruction[0], out=jumpPos); // ALU Out > 0 and jump if > 0
    And(a=ALUZero, b=instruction[1], out=jumpZero); // ALU Out = 0 and jump if = 0
    And(a=ALUNeg, b=instruction[2], out=jumpNeg); // ALU Out < 0 and jump if < 0

    // Combine jump bits
    Or(a=jumpPos, b=jumpZero, out=jump01); // jump if positive or zero
    Or(a=jump01, b=jumpNeg, out=jump012); // jump if positive, zero, or negative
    And(a=instruction[15], b=jump012, out=jump); // only jump if it's a C instruction
    
    // Control the Program Counter
    Not(in=jump, out=NotJump); // always increment if not jump
    PC(in=ARegOut, load=jump, inc=NotJump, reset=reset, out[0..14]=pc); // finally jump.
}